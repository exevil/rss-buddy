name: Process RSS Feeds

on:
  schedule:
    - cron: '0 */12 * * *'  # Run every 12 hours
  workflow_dispatch:  # Allow manual trigger
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - '.github/workflows/process-rss.yml'
      - 'rss-buddy.sh'

jobs:
  process-rss:
    runs-on: ubuntu-latest
    # Use the github-pages environment where all secrets are stored
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install feedparser python-dateutil openai python-dotenv
      
      # Check if output branch exists and fetch state file
      - name: Check if output branch exists
        id: check_branch
        run: |
          if git ls-remote --heads origin output | grep output; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Fetch latest state from output branch if it exists
        if: steps.check_branch.outputs.exists == 'true'
        run: |
          mkdir -p processed_feeds
          git fetch origin output
          git checkout FETCH_HEAD -- processed_state.json || echo "No state file found"
          if [ -f "processed_state.json" ]; then
            mv processed_state.json processed_feeds/
          fi
          
      # Use secrets from the github-pages environment
      - name: Process RSS feeds
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RSS_FEEDS: ${{ vars.RSS_FEEDS }}
          USER_PREFERENCE_CRITERIA: ${{ vars.USER_PREFERENCE_CRITERIA }}
          DAYS_LOOKBACK: ${{ vars.DAYS_LOOKBACK || secrets.DAYS_LOOKBACK }}
          AI_MODEL: ${{ vars.AI_MODEL || secrets.AI_MODEL }}
          SUMMARY_MAX_TOKENS: ${{ vars.SUMMARY_MAX_TOKENS || secrets.SUMMARY_MAX_TOKENS }}
        run: |
          python rss_processor.py
          
      - name: Generate GitHub Pages
        run: |
          python generate_pages.py
      
      # Configure Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      # Upload artifact for GitHub Pages
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'
      
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
          
      # Create a fresh orphan branch for the output
      - name: Create/update output branch (with single commit history)
        run: |
          # Create temporary directory for output contents
          mkdir -p /tmp/output
          cp -r processed_feeds/* /tmp/output/
          
          # Create a fresh orphan branch (no commit history)
          git checkout --orphan temp-output
          
          # Remove everything from the working directory
          git rm -rf --ignore-unmatch .
          
          # Copy only the output files
          cp -r /tmp/output/* .
          
          # Create a minimal README for the output branch
          cat > README.md << 'EOF'
          # RSS-Buddy Output Branch
          
          This branch contains only the processed RSS feeds and state file generated by RSS-Buddy.
          
          **Note:** This branch contains a single commit with the latest processed feeds. Each update completely replaces the previous version with no history.
          
          The main branch contains the actual source code of the project.
          EOF
          
          # Stage all changes
          git add .
          
          # Configure Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit with timestamp
          git commit -m "Update processed feeds - $(date +'%Y-%m-%d %H:%M:%S')"
          
          # Force push to output branch, replacing any existing history
          git push origin HEAD:output --force
          
          # Return to main branch
          git checkout main 
